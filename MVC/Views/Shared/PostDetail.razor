@using MVC.Helpers
@inject NavigationManager NavigationManager
@inject HttpContextService HttpContextService
@inject LikeService LikeService
@inject PostService PostService

<div class="d-flex justify-content-end w-100 mb-2">
    <button class="btn btn-primary" @onclick="OnClickCreateComment">Create comment</button>
</div>

<div class="">
    <table class="table table-striped table-bordered table-hover">
        <thead>
        </thead>
        <tbody>
            <tr>
                @if (Model.PageInfo.CurrentPage == 1)
                {
                    <td>
                        <div class="text-nowrap">
                            <div>
                                <img src="@Model.Post.User.MdProfilePicture" alt="profile picture" />
                            </div>
                            <div>
                                User:
                            </div>
                            <div>
                                <a href="/profile/@Model.Post.User.UserName" target="_self">
                                    @Model.Post.User.UserName
                                </a>
                            </div>
                        </div>
                    </td>
                
                <td class="w-100">
                    @if (Model.UserId == Model.Post.User.Id)
                    {
                        <button class="btn btn-primary" @onclick="() => OnEditPostClicked(Model.Post.Id)">Edit post</button>
                        <form method="post" action="/post/delete">
                            <input type="hidden" name="postId" value="@Model.Post.Id" />
                            <button type="submit" class="btn btn-danger">Delete Post</button>
                        </form>
                    }
                    <h3>
                        @Model.Post.Title
                    </h3>
                    <p>
                        @Model.Post.Content
                    </p>
                </td>

                
                <td>
                    <div class="text-nowrap">
                        <div>
                            Created at: <DisplayDateTime DateTime="@Model.Post.CreatedAt" />
                        </div>
                        <div>
                            Likes: @Model.Post.Likes
                        </div>
                        <div>
                            Views: @Model.Post.ViewCount
                        </div>
                        <div>
                            Edited: @Model.Post.Edited
                        </div>
                        <div>
                            @if (!Model.Post.LikedByUser)
                            {
                                <button class="btn py-0 px-1 " @onclick="() => OnPostLikeClicked(Model.Post.Id)">
                                    <i class="bi bi-hand-thumbs-up" style="font-size: 1.5rem; color: black;"></i>
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-primary py-0 px-1" @onclick="() => OnPostDislikeClicked(Model.Post.Id)">
                                    <i class="bi bi-hand-thumbs-up" style="font-size: 1.5rem; color: white;"></i>
                                </button>
                            }

                        </div>
                        @if (Model.Post.Edited)
                        {
                            <a href="/PostHistory/@Model.Post.Id" target="_self" class="btn btn-primary">
                                View edit history
                            </a>
                        }
                    </div>
                </td>
                }
            </tr>
            @foreach (Comment comment in Model.Comments)
            {
                <tr>
                    <td>
                        <div class="text-nowrap">
                            <div>
                                <img src="@comment.User.MdProfilePicture" alt="profile picture" />
                            </div>
                            <div>
                                User:
                            </div>
                            <div>
                                <a href="/profile/@comment.User.UserName" target="_self">
                                    @comment.User.UserName
                                </a>
                            </div>
                        </div>
                    </td>
                    <td class="w-100">
                        @if (Model.UserId == comment.UserId)
                        {
                            <a href="/Comment/Update?commentId=@comment.Id" target="_self" class="btn btn-primary">
                                Edit comment
                            </a>

                            <form action="/Comment/Delete" method="post">
                                <input type="hidden" name="commentId" value="@comment.Id" />
                                <input type="hidden" name="postId" value="@Model.Post.Id" />
                                <button type="submit" class="btn btn-danger">Delete comment</button>
                            </form>
                        }
                        <p>
                            @comment.Content
                        </p>
                    </td>
                    <td>
                        <div class="text-nowrap">
                            <div>
                                Created at: <DisplayDateTime DateTime="comment.CreatedAt" />
                            </div>
                            <div>
                                Likes: @comment.Likes
                            </div>
                            <div>
                                Edited: @comment.Edited
                            </div>
                            <div>
                                @if (!comment.LikedByUser)
                                {
                                    <button class="btn py-0 px-1 " @onclick="() => OnCommentLikeClicked(comment)">
                                        <i class="bi bi-hand-thumbs-up" style="font-size: 1.5rem; color: black;"></i>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-primary py-0 px-1" @onclick="() => OnCommentDislikeClicked(comment)">
                                        <i class="bi bi-hand-thumbs-up" style="font-size: 1.5rem; color: white;"></i>
                                    </button>
                                }
                            </div>
                            @if (comment.Edited)
                            {
                                <a href="/CommentHistory/@comment.Id" target="_self" class="btn btn-primary">
                                    View edit history
                                </a>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public int PostId { get; set; }

    [Parameter]
    public PostViewModel Model { get; set; }

    private bool IsLoaded;

    private bool Liked { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string bearer = HttpContextService.HttpContext.Session.GetJson<string>("Bearer");
        if (string.IsNullOrEmpty(bearer))
        {
            return;
        }

        if (IsLoaded)
        {
            return;
        }

        PageInfo pageInfo = new PageInfo();
        var result = await PostService.GetPostDetails(PostId, pageInfo, bearer);
        if (!result.IsSuccess)
        {
            return;
        }

        Model.Post = result.Content.PostDto;
        Model.Comments = result.Content.Comments;
        Model.PageInfo = result.Content.PageInfo;
        IsLoaded = true;
    }

    private void OnClickCreateComment(MouseEventArgs e)
    {
        NavigationManager.NavigateTo($"/Comment/CreateComment?postId={Model.Post.Id}", true);
    }

    private async Task OnPostLikeClicked(int postId)
    {
        string bearer = HttpContextService.HttpContext.Session.GetJson<string>("Bearer");

        if (string.IsNullOrEmpty(bearer))
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        var result = await LikeService.LikePostAsync(postId, bearer);

        if (result.IsSuccess)
        {
            Model.Post.LikedByUser = true;
            Model.Post.Likes++;
        }
    }

    private async Task OnPostDislikeClicked(int postId)
    {
        string bearer = HttpContextService.HttpContext.Session.GetJson<string>("Bearer");

        if (string.IsNullOrEmpty(bearer))
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        var result = await LikeService.DislikePostAsync(postId, bearer);

        if (result.IsSuccess)
        {
            Model.Post.LikedByUser = false;
            Model.Post.Likes--;
        }
    }

    private async Task OnCommentLikeClicked(Comment comment)
    {
        string bearer = HttpContextService.HttpContext.Session.GetJson<string>("Bearer");

        if (string.IsNullOrEmpty(bearer))
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        var result = await LikeService.LikeCommentAsync(comment.Id, bearer);

        if (result.IsSuccess)
        {
            comment.LikedByUser = true;
            comment.Likes++;
        }
    }

    private async Task OnCommentDislikeClicked(Comment comment)
    {
        string bearer = HttpContextService.HttpContext.Session.GetJson<string>("Bearer");

        if (string.IsNullOrEmpty(bearer))
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        var result = await LikeService.DislikeCommentAsync(comment.Id, bearer);

        if (result.IsSuccess)
        {
            comment.LikedByUser = false;
            comment.Likes--;
        }
    }

    private void OnEditPostClicked(int postId)
    {
        NavigationManager.NavigateTo($"Post/Update?postId={postId}", true);
    }
}
